name: Deploy to Amazon ECS

on:
  push:
    branches:
#      - $default-branch
      - feature/**
    paths:
#      - "**.py"
#      - Dockerfile
#      - requirements_dev.txt
      - pint-be/pint/**
      - .github/workflows/**
      - docker-compose*
  pull_request:
    types:
      - closed
    branches:
      - $default-branch
  release:
    types: [published]
  workflow_dispatch:






env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: pint-be           # set this to your Amazon ECR repository name
#  ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
#  ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
#  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
#  CONTAINER_NAME: MY_CONTAINER_NAME           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
#  cancel_previous_runs:
#    if: github.event_name == 'pull_request'
#    runs-on: ubuntu-latest
#    steps:
#      - uses: n1hility/cancel-previous-runs@v2
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#  build-and-push-image:
#    if: github.event.type != 'pull_request' || github.event.pull_request.merged == true
#    permissions:
#      contents: read
#      packages: write
#    runs-on: ubuntu-20.04
#    steps:
#      - uses: actions/checkout@v2
#
#      - uses: tenhaus/get-release-or-tag@v2
#        id: tag-or-sha
#
#      - name: Log in to the Container registry
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#
##      - name: Extract metadata (tags, labels) for Docker
##        id: meta
##        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
##        with:
##          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#
#      - name: Cache Docker layers
#        uses: actions/cache@v2
#        with:
#          path: /tmp/.buildx-cache
#          key: ${{ runner.os }}-buildx-${{ github.sha }}
#          restore-keys: |
#            ${{ runner.os }}-buildx-
#
#      - name: Build and push Docker image
#        uses: docker/build-push-action@v2
#        with:
#          file: pint-be/Dockerfile
#          context: pint-be
#          push: true
#          tags: |
#            ${{ steps.meta.outputs.tags }}
#            albertojacini/pint-be:${{ steps.tag-or-sha.outputs.tag }}
#          labels: ${{ steps.meta.outputs.labels }}
#          build-args: |
#            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
#            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    if: github.event.type != 'pull_request' || github.event.pull_request.merged == true
    env:
      TAG: ${{ github.event.type }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

#    - name: Configure AWS credentials
#      uses: aws-actions/configure-aws-credentials@v1
#      with:
#        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        aws-region: ${{ env.AWS_REGION }}

    - name: Install SSH Key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.PROD_HOST_SSH_PRIVATE_KEY }}
        known_hosts: 'just-a-placeholder-so-we-dont-get-errors'

    - name: Adding Known Hosts
      run: ssh-keyscan -H ${{ secrets.PROD_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to Digital Ocean
      id: deploy-to-digital-ocean
      run: |
        docker context create prod-host --docker="host=ssh://root@${{ secrets.PROD_HOST }}"
        export DOCKER_CONTEXT='prod-host'
        docker compose -f docker-compose-prod.yml up -d -e IMAGE_TAG=${{ env.IMAGE_TAG }}
